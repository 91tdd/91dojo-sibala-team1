<?php
/**
 * Created by PhpStorm.
 * User: JoeyChen
 * Date: 2018/7/16
 * Time: 下午 10:55
 */

namespace JoeyDojo;

use Mockery\Adapter\Phpunit\MockeryPHPUnitIntegration;
use Mockery as m;
use PHPUnit\Framework\TestCase;

class AuthenticationServiceTest extends TestCase
{
    private $profile;
    private $token;
    private $target;
    use MockeryPHPUnitIntegration;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->profile = m::mock(Profile::class);
        $this->token = m::mock(Token::class);
        $this->target = new AuthenticationService($this->profile, $this->token);
    }

    /**
     * @test
     */
    public function test_is_valid()
    {
        $this->givenPassword('joey', '91');
        $this->givenRandom('000000');

        $this->shouldBeValid('joey', '91000000');
    }

    protected function givenPassword($account, $password)
    {
        $this->profile->shouldReceive('getPassword')
            ->with($account)
            ->andReturn($password);
    }

    protected function givenRandom($random)
    {
        $this->token->shouldReceive('getRandom')
            ->withAnyArgs()
            ->andReturn($random);
    }

    protected function shouldBeValid($account, $passCode)
    {
        $this->assertTrue($this->target->isValid($account, $passCode));
    }
}

class FakeProfile implements Profile
{
    public function getPassword($account)
    {
        if ($account == 'joey') {
            return '91';
        }
        return '';
    }
}

class FakeToken implements Token
{

    public function getRandom($account)
    {
        return '000000';
    }
}
